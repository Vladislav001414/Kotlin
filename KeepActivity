package com.example.myappplan

import android.annotation.SuppressLint
import android.app.AlertDialog
import android.content.Context
import android.content.Intent
import android.content.res.Configuration
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle

import android.view.LayoutInflater
import android.view.Menu
import android.view.MenuItem
import android.view.View
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.view.GravityCompat
import androidx.lifecycle.asLiveData
import androidx.recyclerview.widget.GridLayoutManager
import com.example.myappplan.databinding.ActivityKeepBinding
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.util.Locale


class KeepActivity : AppCompatActivity() {

    lateinit var binding: ActivityKeepBinding
    lateinit var dbPersonalization: DateBasePersonalization
    lateinit var dbKeep: KeepDateBase
    lateinit var locale: Locale

    private val keepAdapter = KeepAdapter()
    var editLauncher: ActivityResultLauncher<Intent>? = null
    private val config = Configuration()
    private var column = 0

    var title = ""
    var description = ""
    var numbers = ""

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        dbKeep = KeepDateBase.getDb(this)
        dbPersonalization = DateBasePersonalization.getDb(this)

        CoroutineScope(Dispatchers.IO).launch {
            val languageCode = dbPersonalization.getDao().selectLanguage()
            if (languageCode != null) {
                setLocale(languageCode)
            }
        }

        binding = ActivityKeepBinding.inflate(layoutInflater)
        setContentView(binding.root)

        setSupportActionBar(binding.toolbar2)
        supportActionBar?.setHomeAsUpIndicator(R.drawable.baseline_menu_24)
        supportActionBar?.setDisplayHomeAsUpEnabled(true)

        binding.Navigationmenu.menu.findItem(R.id.versionsApp).title = "${getString(R.string.versions)} 1.0" //Менять версию в NavigationView, менять только 1.0 на другую

        CoroutineScope(Dispatchers.IO).launch {
            val columnFromDb = dbPersonalization.getDao().selectColumn()

            withContext(Dispatchers.Main) {
                column = columnFromDb
                setupNavigationMenu()
                setupBottomNavigationView()
                init()
            }
        }


        dbKeep.getDao().getAllKeepItems().asLiveData().observe(this) { list ->
            title = ""
            description = ""
            numbers = ""
            for (index in 0 until keepAdapter.keeplist.size) {
                keepAdapter.notifyItemRemoved(0)
                keepAdapter.keeplist.removeAt(0)
            }

            list.forEach {
                val text = Keeps(it.titles, it.descriptions)
                keepAdapter.addKeeps(text)

            }
        }

        keepAdapter.setOnDeleteClickListenerCustom(object : KeepAdapter.OnDeleteClickListener {
            override fun onDeleteClick(position: Int) {
                keepAdapter.keeplist.removeAt(position)
                keepAdapter.notifyItemRemoved(position)
                CoroutineScope(Dispatchers.IO).launch{
                    dbKeep.getDao().deleteKeepItemByNumbers(position)
                    dbKeep.getDao().decrementKeepNumbers(position)}
            }
        })


        editLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()){
            if(it.resultCode == RESULT_OK) {
                keepAdapter.addKeeps(it.data?.getSerializableExtra("keeps") as Keeps)

            }
        }
    }

    private fun setupNavigationMenu() {
        binding.Navigationmenu.setNavigationItemSelectedListener { item ->
            when (item.itemId) {
                R.id.language -> showLanguageDialog()

            }
            true
        }
    }

    private fun showLanguageDialog() {
        val dialogView = LayoutInflater.from(this).inflate(R.layout.language_dialog, null)
        val builder = AlertDialog.Builder(this)
        builder.setView(dialogView)
        builder.setTitle(getString(R.string.select_language))

        val dialog = builder.create()
        dialog.show()

        val widthInDp = resources.getDimensionPixelSize(R.dimen.dialog_width)
        val window = dialog.window
        val params = window?.attributes
        params?.width = widthInDp
        window?.attributes = params
    }




    fun polish_language(view: View) = with(binding){
        LanguageSelectClass(this@KeepActivity, KeepActivity::class.java).selectPolishLanguage()
    }

    fun english_language(view: View) = with(binding) {
        LanguageSelectClass(this@KeepActivity, KeepActivity::class.java).selectEnglishLanguage()
    }

    fun ukrainian_language(view: View) = with(binding) {
        LanguageSelectClass(this@KeepActivity, KeepActivity::class.java).selectUkrainianLanguage()
    }

    fun russian_language (view: View) = with(binding){
        LanguageSelectClass(this@KeepActivity, KeepActivity::class.java).selectRussianLanguage()
    }

    fun setLocale(languageCode: String) {
        locale = Locale(languageCode)
        Locale.setDefault(locale)

        config.locale = locale

        resources.updateConfiguration(config, resources.displayMetrics)
    }

    @Deprecated("Deprecated in Java")
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if(requestCode == 1 && resultCode == RESULT_CANCELED){
            val position = data?.getIntExtra("position", 0) ?: 0
            val keeps = data?.getSerializableExtra("keeps") as? Keeps
            if(keeps!=null){
                keepAdapter.editKeeps(data.getSerializableExtra("keeps") as Keeps, position)
            }
        }
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menuInflater.inflate(R.menu.keep_activity_menu, menu)
        @SuppressLint("UseCompatLoadingForDrawables")
        if (column == 1){
            binding.toolbar2.menu.findItem(R.id.RecyclerViewType).icon = getDrawable(R.drawable.outline_grid_view_24)
        }
        else{
            binding.toolbar2.menu.findItem(R.id.RecyclerViewType).icon = getDrawable(R.drawable.outline_view_agenda_24)
        }
        binding.bottomNavigationView.selectedItemId = R.id.keep
        return true
    }

    @SuppressLint("UseCompatLoadingForDrawables")
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        when(item.itemId){

            android.R.id.home -> binding.apply{

                CoroutineScope(Dispatchers.IO).launch {
                    val theme = dbPersonalization.getDao().selectTheme()
                    val isLightTheme = theme == "light"

                    withContext(Dispatchers.Main) {
                        if (isLightTheme) {
                            binding.Navigationmenu.menu.findItem(R.id.theme).title = getString(R.string.light_theme)
                        } else {
                            binding.Navigationmenu.menu.findItem(R.id.theme).title = getString(R.string.dark_theme)
                        }
                    }
                }


                keepDriver.openDrawer(GravityCompat.START)
            }

            R.id.RecyclerViewType ->{

                if (column == 2){
                    item.icon = getDrawable(R.drawable.outline_grid_view_24)
                    column = 1
                    CoroutineScope(Dispatchers.IO).launch {dbPersonalization.getDao().updateColumn(column)}
                    binding.keepRecyclerView.layoutManager = GridLayoutManager(this@KeepActivity,column )
                }
                else{
                    item.icon = getDrawable(R.drawable.outline_view_agenda_24)
                    column = 2
                    CoroutineScope(Dispatchers.IO).launch {dbPersonalization.getDao().updateColumn(column)}
                    binding.keepRecyclerView.layoutManager = GridLayoutManager(this@KeepActivity,column )
                }
            }
        }

        return true

    }

    private fun init(){
        binding.apply {
            keepRecyclerView.layoutManager = GridLayoutManager(this@KeepActivity,column )
            keepRecyclerView.adapter = keepAdapter
            buttonAdd.setOnClickListener {
                editLauncher?.launch(Intent(this@KeepActivity, KeepEditActivity::class.java))
            }
        }
    }
}

